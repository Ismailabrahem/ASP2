@page "/deleteproduct"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using ManeroBackOffice.Models


<h3>Delete Product</h3>

<div class="form-group">
    <label for="productId">Product ID</label>
    <InputText id="productId" class="form-control" @bind-Value="productId" />
</div>
<button class="btn btn-primary" @onclick="FetchProduct" style="margin-top: 1rem;">Fetch Product</button>

@if (!string.IsNullOrEmpty(fetchMessage))
{
    <div class="alert alert-info mt-3">
        @fetchMessage
    </div>
}

@if (product != null)
{
    <div class="mt-4">
        <h4>Product Details</h4>
        <div><strong>Batch Number:</strong> @product.BatchNumber</div>
        <div><strong>Title:</strong> @product.Title</div>
        <div><strong>Short Description:</strong> @product.ShortDescription</div>
        <div><strong>Long Description:</strong> @product.LongDescription</div>
        <div><strong>Categories:</strong> @string.Join(", ", product.Categories)</div>
        <div><strong>Color:</strong> @product.Color</div>
        <div><strong>Size:</strong> @product.Size</div>
        <div><strong>Price:</strong> @product.Price</div>
        <div><strong>Image URL:</strong> @product.ImageUrl</div>

        <button class="btn btn-danger mt-3" @onclick="ConfirmDelete">Delete Product</button>
    </div>
}

@if (confirmDelete)
{
    <div class="alert alert-danger mt-3">
        Are you sure you want to delete this product?
        <button class="btn btn-danger ml-2" @onclick="PerformDeleteProduct">Yes</button>
        <button class="btn btn-secondary ml-2" @onclick="CancelDelete">No</button>
    </div>
}

@code {
    private string productId = string.Empty;
    private ProductModel? product = null;
    private string fetchMessage = string.Empty;
    private bool confirmDelete = false;

    private async Task FetchProduct()
    {
        fetchMessage = "Fetching product...";
        Console.WriteLine("Fetching product...");
        try
        {
            var response = await Http.GetAsync($"http://localhost:7181/api/products/{productId}?");

            if (response.IsSuccessStatusCode)
            {
                var productJson = await response.Content.ReadAsStringAsync();
                product = JsonSerializer.Deserialize<ProductModel>(productJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (product != null)
                {
                    fetchMessage = "Product details fetched successfully. You can now delete the product.";
                    Console.WriteLine("Product details fetched successfully.");
                }
                else
                {
                    fetchMessage = "Failed to fetch product details.";
                    Console.WriteLine("Failed to fetch product details.");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                fetchMessage = "No product found. Please try again.";
                Console.WriteLine("No product found. Please try again.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                fetchMessage = $"Error: {error}";
                Console.WriteLine($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            fetchMessage = $"Exception: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void ConfirmDelete()
    {
        Console.WriteLine("Confirm delete clicked");
        confirmDelete = true;
    }

    private void CancelDelete()
    {
        Console.WriteLine("Cancel delete clicked");
        confirmDelete = false;
    }

    private async Task PerformDeleteProduct()
    {
        Console.WriteLine("Perform delete product...");
        if (product == null)
        {
            fetchMessage = "No product to delete.";
            Console.WriteLine("No product to delete.");
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"http://localhost:7181/api/products/{product.Id}?");

            if (response.IsSuccessStatusCode)
            {
                fetchMessage = "Product deleted successfully.";
                Console.WriteLine("Product deleted successfully.");
                product = null;
                confirmDelete = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                fetchMessage = $"Error: {error}";
                Console.WriteLine($"Error deleting product: {error}");
            }
        }
        catch (Exception ex)
        {
            fetchMessage = $"Exception: {ex.Message}";
            Console.WriteLine($"Exception deleting product: {ex.Message}");
        }
    }
}