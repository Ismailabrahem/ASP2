@page "/updateproduct"
@attribute [Authorize]
@rendermode InteractiveAuto

@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using ManeroBackOffice.Models
@using Microsoft.AspNetCore.Authorization

<h3>Update Product</h3>

<div class="form-group">
    <label for="productId">Product ID</label>
    <InputText id="productId" class="form-control" @bind-Value="productId" />
</div>
<button class="btn btn-primary" style="margin-top: 1rem;" @onclick="FetchProduct">Fetch Product</button>

@if (!string.IsNullOrEmpty(fetchMessage))
{
    <div class="alert alert-info mt-3">
        @fetchMessage
    </div>
}

@if (product != null)
{
    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="batchNumber">Batch Number</label>
            <InputText id="batchNumber" class="form-control" @bind-Value="product.BatchNumber" disabled />
        </div>
        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="product.Title" />
        </div>
        <div class="form-group">
            <label for="shortDescription">Short Description</label>
            <InputTextArea id="shortDescription" class="form-control" @bind-Value="product.ShortDescription" />
        </div>
        <div class="form-group">
            <label for="longDescription">Long Description</label>
            <InputTextArea id="longDescription" class="form-control" @bind-Value="product.LongDescription" />
        </div>
        <div class="form-group">
            <label for="categories">Categories (comma separated)</label>
            <InputText id="categories" class="form-control" @bind-Value="categories" />
        </div>
        <div class="form-group">
            <label for="color">Color</label>
            <InputText id="color" class="form-control" @bind-Value="product.Color" />
        </div>
        <div class="form-group">
            <label for="size">Size</label>
            <InputText id="size" class="form-control" @bind-Value="product.Size" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
        </div>
        <div class="form-group">
            <label for="imageUrl">Image URL</label>
            <InputText id="imageUrl" class="form-control" @bind-Value="product.ImageUrl" />
        </div>

        <button type="submit" style="margin-top: 1rem;" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    private string productId = string.Empty;
    private ProductModel? product = null;
    private string categories = string.Empty;
    private string fetchMessage = string.Empty;

    private async Task FetchProduct()
    {
        fetchMessage = "Fetching product...";
        try
        {
            var response = await Http.GetAsync($"http://localhost:7181/api/products/{productId}?");

            if (response.IsSuccessStatusCode)
            {
                var productJson = await response.Content.ReadAsStringAsync();
                product = JsonSerializer.Deserialize<ProductModel>(productJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (product != null)
                {
                    categories = string.Join(", ", product.Categories);
                    fetchMessage = "Product details fetched successfully. You can now update the product.";
                }
                else
                {
                    fetchMessage = "Failed to fetch product details.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                fetchMessage = "No product found. Please try again.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                fetchMessage = $"Error: {error}";
            }
        }
        catch (Exception ex)
        {
            fetchMessage = $"Exception: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (product == null)
        {
            fetchMessage = "No product to update.";
            return;
        }

        try
        {
            product.Categories = categories.Split(',').Select(c => c.Trim()).ToList();
            var jsonProduct = JsonSerializer.Serialize(product);
            var content = new StringContent(jsonProduct, System.Text.Encoding.UTF8, "application/json");

            Console.WriteLine($"Updating product with ID {product.Id}: {jsonProduct}");

            var response = await Http.PutAsync($"http://localhost:7181/api/products/{product.Id}?", content);

            if (response.IsSuccessStatusCode)
            {
                fetchMessage = "Product updated successfully.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                fetchMessage = $"Error: {error}";
                Console.WriteLine($"Error updating product: {error}");
            }
        }
        catch (Exception ex)
        {
            fetchMessage = $"Exception: {ex.Message}";
            Console.WriteLine($"Exception updating product: {ex.Message}");
        }
    }
}