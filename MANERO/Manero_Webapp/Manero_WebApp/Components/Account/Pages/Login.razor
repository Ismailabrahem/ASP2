@page "/Account/Login"



@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<script src="https://cdn.tailwindcss.com"></script>
<script>tailwind.config {theme: colors: {white: '#FFFFFF' black: '#111111'} {screens: {'sm': '640px', 'md': '768px', 'lg': '1024px', 'xl': '1280px', '2xl': '1536px',</script>

<PageTitle>Log in</PageTitle>
<div class="text-center">
    <div class="flex justify-center mt-5">
     <img class="lg:hidden" src="../../Images/rectangle.png" alt="">
    </div>
    <div class="">
        <StatusMessage Message="@errorMessage" />
        <EditForm class="" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h1 class="font-semibold text-2xl mt-2">Welcome Back!</h1>
            <p class="mb-10">Sign in to continue</p>
            <div class="grid justify-center mt-4">
                <div class="relative">
                <label class="absolute -top-3 left-5 px-1 bg-white font-light" for="email">Email</label>
                <InputText @bind-Value="Input.Email" class="border rounded-full w-96 h-10 p-4" autocomplete="username" aria-required="true" />
                </div>
            </div>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
            <div class="grid justify-center mt-4">
                <div class="relative">
                <label class="absolute -top-3 left-5 px-1 bg-white font-light" for="password">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="border rounded-full w-96 h-10 p-4" autocomplete="new-password" aria-required="true" />
                </div>
            </div>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
            <div class="checkbox mb-3 mt-4">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
                <p class="font-bold"><a href="/account/forgotpassword">Forgot password?</a></p>
            </div>
            <button type="submit" class="mt-2 bg-black rounded-3xl text-white px-40 py-2">Log in</button>
            <p class="mb-10">Don't have an account? <a class="font-bold" href="/account/register">Sign up</a></p>
        </EditForm>
    </div>
    <div>
    <ExternalLoginPicker />
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {

            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/producthome");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
